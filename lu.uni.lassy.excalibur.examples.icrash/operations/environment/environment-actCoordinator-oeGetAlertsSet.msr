package icrash.operations.environment.actCoordinator.oeGetAlertsSet {

import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.messir.libraries.calendar

import icrash.concepts.primarytypes.datatypes
import icrash.environment

import icrash.concepts.primarytypes.classes

Operation Model {

	operation: actCoordinator.outactCoordinator.oeGetAlertsSet(
		AetAlertStatus:etAlertStatus
	):ptBoolean{
	
	preP {
		let TheSystem: ctState in
  		let TheActor:actAuthenticated in
  		self.rnActor.rnSystem = TheSystem
  		and self.rnActor = TheActor
  
		/* PreP01 */
  		and TheSystem.vpStarted = true
		/* PreP02 */
  		and TheActor.rnctAuthenticated.vpIsLogged = true
	}
	
	preF {
		let TheSystem: ctState in
		self.rnActor.rnSystem = TheSystem
		and not (TheSystem.rnctAlert->isEmpty())
	}
	
	postF {
		let 
			theSystem: ctState = self.rnActor.rnSystem,
			theAlerts: Set(ctAlert) = Set{}
		in
			theAlerts = theSystem.rnctAlert-> select(a:ctAlert | a.status = AetAlertStatus)
			and TheAlerts->forAll(a:ctAlert | if (a.hash = a.hash.calculate()) 
												  then (a@post = a) 
												  else (let c:ctAlertBackup in
														c = TheAlertsBackup->select(b:ctAlertBackup | a.id = b.id)
														and a@post = c) 
												  endif)
			and self.rnActor.rnInterfaceIN^ieSendAlerts(theAlerts)
	}
	
	postP {true}
		
		
	//prolog{"src/Operations/Environment/OUT/outactCoordinator-oeGetAlertsSet.pl"}
}
}
}