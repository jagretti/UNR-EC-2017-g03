package icrash.environment.operations.actAdministrator.outactAdministrator.oeCheckAlertsIntegrity {

import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.messir.libraries.calendar
import icrash.concepts.primarytypes.classes
import icrash.environment

	Operation Model {

		operation: icrash.environment.actAdministrator.outactAdministrator.oeCheckAlertsIntegrity():ptBoolean{
		// include below the specification information (pre,post or ocl or prolog)
			preP {
				let TheSystem: ctState in
  				let TheActor: actAdministrator in
  
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = TheActor
  
				/* PreP01 */
				and TheSystem.vpStarted = true
				/* PreP02 */
				and TheActor.rnctAuthenticated.vpIsLogged = true
			}
			
			preF {
				let TheSystem: ctState in
				self.rnActor.rnSystem = TheSystem
				and not (TheSystem.rnctAlert->isEmpty())
			}
			
			postF{
				let TheSystem: ctState in
				let TheAlerts: Set(ctAlert) in
				let TheAlertsBackup: Set(ctAlertBackup) in
				self.rnActor.rnSystem = TheSystem
				and TheSystem.rnctAlert = TheAlerts
				and TheSystem.rnctAlertBackup = TheAlertsBackup
				and TheAlerts->iterate(a:ctAlert; | if (a.hash = a.hash.calculate()) 
					then (a) 
					else (let c:ctAlertBackup in
							c = TheAlertsBackup->select(b:ctAlertBackup | a.id = b.id)
							and a@post = c
					) 
					endif
				)
			}
			
			postP{true}

		}
	}
}
