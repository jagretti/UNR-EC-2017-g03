package icrash.environment.operations.actCoordinator.outactCoordinator.oeSendHospitalInfo {

import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.messir.libraries.calendar
import icrash.concepts.primarytypes.datatypes
import icrash.concepts.primarytypes.classes
import icrash.environment

	Operation Model {

		operation: icrash.environment.actCoordinator.outactCoordinator.oeSendHospitalInfo(AdtHospitalInfo: dtHospitalInfo, 
			AdtCrisisID:dtCrisisID):ptBoolean{
		// include below the specification information (pre,post or ocl or prolog)
		
		preP {
			let
				TheSystem: ctState
			in
				self.rnActor.rnSystem = TheSystem
				TheSystem.vpStarted = true
		}
		
		preF {
			let
				TheSystem: ctState,
				TheCrises: Set(ctCrisis),
				TheCrisis: ctCrisis,
				TheActCoordinator : actCoordinator,
				TheCtCoordinator: ctCoordinator,
				TheHandledCrisis: Set(ctCrisis)
			in
				self.rnActor.rnSystem = TheSystem
				TheActCoordinator = self.rnActor
				TheActCoordinator.rnctCoordinator = TheCtCoordinator
				TheCtCoordinator.rnHandled = TheHandledCrisis
				TheHandledCrisis -> exists (c:ctCrisis | c.id = AdtCrisisID)
		}
		
		postF {
			let 
				TheSystem: ctState,
				TheHospitals: Set(ctHospital)
			in
				self.rnActor.rnSystem = TheSystem
				TheSystem.rnctHospital = TheHospitals
				TheHospitals -> forAll(h:ctHospital | h.attLocation.isNearTo(AdtHospitalInfo.location) and h.rnactHospital.rnInterfaceIN^ieSendHospitalInfo(AdtHospitalInfo))
		}
		
		postP{true}

		}
	}
}
