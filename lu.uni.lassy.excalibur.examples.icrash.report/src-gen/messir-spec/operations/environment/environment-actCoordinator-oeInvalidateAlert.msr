package icrash.operations.environment.actCoordinator.oeInvalidateAlert {

import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.messir.libraries.calendar
import icrash.concepts.primarytypes.datatypes
import icrash.environment
import icrash.concepts.primarytypes.classes

Operation Model {

operation: actCoordinator.outactCoordinator.oeInvalidateAlert(AdtAlertID:dtAlertID):ptBoolean{
	preP{
		let theSystem: ctState in
  		let theActor:actAuthenticated in
  		self.rnActor.rnSystem = TheSystem
  		and self.rnActor = TheActor
  
		/* PreP01 */
  		and TheSystem.vpStarted = true
		/* PreP02 */
  		and TheActor.rnctAuthenticated.vpIsLogged = true
	}
	
	preF{
		let theSystem: ctState = self.rnActor.rnSystem in
  		let theAlerts: Set(ctAlert) = theSystem.rnctAlert in
  		theAlerts -> exists(a: ctAlert | a.id = AdtAlertID)
	}
	
	postF{
		let theSystem: ctState in
  		let theAlerts: Set(ctAlert) in
  		let theAlert: ctAlert in
  		theSystem = self.rnActor.rnSystem and
  		theAlerts = theSystem.rnctAlert and
  		
  		theAlerts->any(a: ctAlert | a.id = AdtAlertID) = theAlert //
  		theAlert@post.status = "invalid"
  		
  		self.rnActor.rnInterfaceIN^ieInvalidateAlert(theAlert.id)
	}
	
	postP{true}
prolog{"src/Operations/Environment/OUT/outactCoordinator-oeInvalidateAlert.pl"}
}
}
}